import streamlit as st
import pandas as pd
import plotly.express as px
import folium
from streamlit_folium import folium_static
import nltk
from nltk.sentiment import SentimentIntensityAnalyzer
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from wordcloud import WordCloud
import requests
from bs4 import BeautifulSoup
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import seaborn as sns
from dotenv import load_dotenv
import os

# Cargar variables de entorno y configurar la página
load_dotenv()
st.set_page_config(page_title="Análisis de Mercado de Airbnb", layout="wide")

# Inicializar el estado de la sesión
if 'anuncios_analizados' not in st.session_state:
    st.session_state.anuncios_analizados = pd.DataFrame()
if 'modelo' not in st.session_state:
    st.session_state.modelo = None

# Funciones auxiliares (se mantienen igual)
def conectar_a_base_de_datos():
    pass

def ejecutar_proceso_etl():
    pass

@st.cache_data
def cargar_datos():
    # Datos de ejemplo
    return pd.DataFrame({
        'ciudad': np.random.choice(['Barcelona', 'Madrid', 'Valencia'], 1000),
        'precio': np.random.randint(20, 500, 1000),
        'tipo_habitacion': np.random.choice(['Habitación privada', 'Apartamento entero', 'Habitación compartida'], 1000),
        'numero_resenas': np.random.randint(0, 100, 1000),
        'barrio': np.random.choice(['Centro', 'Eixample', 'Gràcia', 'Sants', 'Sant Martí'], 1000),
        'latitud': np.random.uniform(41.3, 41.5, 1000),
        'longitud': np.random.uniform(2.1, 2.3, 1000),
        'habitaciones': np.random.randint(1, 5, 1000),
        'huespedes': np.random.randint(1, 8, 1000),
        'banos': np.random.randint(1, 4, 1000),
    })

def intro():
    # (Código de intro se mantiene igual)
    pass

def panel_principal():
    st.header("Panel de Análisis de Mercado de Airbnb")
    
    df = cargar_datos()
    
    # Filtros interactivos
    col1, col2, col3 = st.columns(3)
    with col1:
        ciudad = st.selectbox("Selecciona una ciudad", df['ciudad'].unique())
    with col2:
        rango_precio = st.slider("Rango de precio", float(df['precio'].min()), float(df['precio'].max()), (float(df['precio'].min()), float(df['precio'].max())))
    with col3:
        tipo_habitacion = st.multiselect("Tipo de habitación", df['tipo_habitacion'].unique())
    
    # Aplicar filtros
    df_filtrado = df[df['ciudad'] == ciudad]
    df_filtrado = df_filtrado[(df_filtrado['precio'] >= rango_precio[0]) & (df_filtrado['precio'] <= rango_precio[1])]
    if tipo_habitacion:
        df_filtrado = df_filtrado[df_filtrado['tipo_habitacion'].isin(tipo_habitacion)]
    
    # Visualizaciones
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("Distribución de Precios")
        fig = px.histogram(df_filtrado, x="precio", nbins=50)
        st.plotly_chart(fig)
        
    with col2:
        st.subheader("Precio Promedio por Barrio")
        precios_barrio = df_filtrado.groupby("barrio")['precio'].mean().sort_values(ascending=False)
        fig = px.bar(precios_barrio, x=precios_barrio.index, y=precios_barrio.values)
        st.plotly_chart(fig)
    
    st.subheader("Ubicaciones de Airbnb")
    m = folium.Map(location=[df_filtrado['latitud'].mean(), df_filtrado['longitud'].mean()], zoom_start=12)
    for idx, row in df_filtrado.iterrows():
        folium.Marker([row['latitud'], row['longitud']], popup=f"Precio: ${row['precio']}").add_to(m)
    folium_static(m)
    
    # Integración del modelo en visualizaciones
    if st.session_state.modelo:
        st.subheader("Comparación de Precios Reales vs Predichos")
        X = df_filtrado[['habitaciones', 'huespedes', 'banos']]
        y_pred = st.session_state.modelo.predict(X)
        
        fig = px.scatter(x=df_filtrado['precio'], y=y_pred, labels={'x': 'Precio Real', 'y': 'Precio Predicho'})
        fig.add_shape(type="line", line=dict(dash="dash"), x0=df_filtrado['precio'].min(), y0=df_filtrado['precio'].min(),
                      x1=df_filtrado['precio'].max(), y1=df_filtrado['precio'].max())
        st.plotly_chart(fig)

def analisis_resenas():
    # (Código de análisis de reseñas se mantiene igual)
    pass

def herramienta_analisis_ia():
    st.header("Herramienta de Análisis de IA")
    
    url_anuncio = st.text_input("Ingresa la URL del anuncio de Airbnb")
    
    if st.button("Analizar"):
        # Simulación de obtención de datos del anuncio
        datos_anuncio = {
            'habitaciones': np.random.randint(1, 5),
            'huespedes': np.random.randint(1, 8),
            'banos': np.random.randint(1, 4),
        }
        
        # Realizar análisis con el modelo
        if st.session_state.modelo:
            precio_predicho = st.session_state.modelo.predict([[
                datos_anuncio['habitaciones'],
                datos_anuncio['huespedes'],
                datos_anuncio['banos']
            ]])[0]
            
            resultados_analisis = {
                'Precio Predicho': f"${precio_predicho:.2f}",
                'Características': datos_anuncio
            }
        else:
            resultados_analisis = {
                'Error': "El modelo no está entrenado. Por favor, entrena el modelo primero."
            }
        
        # Actualizar dataframe
        nueva_fila = pd.DataFrame([resultados_analisis])
        st.session_state.anuncios_analizados = pd.concat([st.session_state.anuncios_analizados, nueva_fila], ignore_index=True)
        
        # Mostrar resultados
        st.subheader("Resultados del Análisis")
        st.write(resultados_analisis)
        
        # Visualizaciones comparativas
        if st.session_state.modelo:
            df = cargar_datos()
            X = df[['habitaciones', 'huespedes', 'banos']]
            y_pred = st.session_state.modelo.predict(X)
            
            st.subheader("Comparación con Otros Anuncios")
            fig = px.scatter(x=df['precio'], y=y_pred, labels={'x': 'Precio Real', 'y': 'Precio Predicho'})
            fig.add_shape(type="line", line=dict(dash="dash"), x0=df['precio'].min(), y0=df['precio'].min(),
                          x1=df['precio'].max(), y1=df['precio'].max())
            fig.add_trace(px.scatter(x=[precio_predicho], y=[precio_predicho], labels={'x': 'Precio Real', 'y': 'Precio Predicho'},
                                     color_discrete_sequence=['red']).data[0])
            st.plotly_chart(fig)

    # Mostrar dataframe de anuncios analizados
    st.subheader("Anuncios Analizados")
    st.dataframe(st.session_state.anuncios_analizados)

def modelo_prediccion():
    st.header("Modelo de Predicción de Precios")
    
    df = cargar_datos()
    
    X = df[['habitaciones', 'huespedes', 'banos']]
    y = df['precio']
    
    # Dividir datos
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    
    if st.button("Entrenar Modelo"):
        # Entrenar modelo
        modelo = RandomForestRegressor(n_estimators=100, random_state=42)
        modelo.fit(X_train, y_train)
        
        # Guardar modelo en el estado de la sesión
        st.session_state.modelo = modelo
        
        # Hacer predicciones
        y_pred = modelo.predict(X_test)
        
        # Evaluar modelo
        mse = mean_squared_error(y_test, y_pred)
        r2 = r2_score(y_test, y_pred)
        
        st.success("Modelo entrenado con éxito!")
        st.write(f"Error Cuadrático Medio: {mse:.2f}")
        st.write(f"Puntuación R-cuadrado: {r2:.2f}")
        
        # Importancia de características
        importancia_caracteristicas = pd.DataFrame({'caracteristica': X.columns, 'importancia': modelo.feature_importances_})
        importancia_caracteristicas = importancia_caracteristicas.sort_values('importancia', ascending=False)
        
        st.subheader("Importancia de Características")
        fig = px.bar(importancia_caracteristicas, x='caracteristica', y='importancia')
        st.plotly_chart(fig)
    
    # Predicción interactiva
    st.subheader("Predicción de Precio")
    col1, col2, col3 = st.columns(3)
    with col1:
        habitaciones = st.number_input("Número de habitaciones", min_value=1, max_value=10, value=2)
    with col2:
        huespedes = st.number_input("Número de huéspedes", min_value=1, max_value=16, value=4)
    with col3:
        banos = st.number_input("Número de baños", min_value=1, max_value=8, value=1)
    
    if st.button("Predecir Precio"):
        if st.session_state.modelo:
            precio_predicho = st.session_state.modelo.predict([[habitaciones, huespedes, banos]])[0]
            st.success(f"El precio predicho es: ${precio_predicho:.2f}")
        else:
            st.error("El modelo no está entrenado. Por favor, entrena el modelo primero.")

# Aplicación principal
def main():
    st.sidebar.title("Índice")
    page = st.sidebar.selectbox("Selecciona una página", ("Inicio", "Panel Principal", "Análisis de Reseñas", "Herramienta de Análisis de IA", "Modelo de Predicción"))
    
    if page == "Inicio":
        intro()
    elif page == "Panel Principal":
        panel_principal()
    elif page == "Análisis de Reseñas":
        analisis_resenas()
    elif page == "Herramienta de Análisis de IA":
        herramienta_analisis_ia()
    elif page == "Modelo de Predicción":
        modelo_prediccion()

if __name__ == "__main__":
    main()
